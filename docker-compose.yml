version: "3.8"

services:

  webwsgi:
    container_name: webwsgi
    build:
      context: MFOTS
      dockerfile: .docker/Dockerfile
    command: python -m gunicorn --timeout 120 MFOTS.wsgi:application --bind 0.0.0.0:8000
    environment:
      - DEBUG=False
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=3803
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    expose:
      - 8000
    ports:
      - "8080:8000"
    networks:
      - ub
    depends_on:
      - db
      - redis
    restart: always

  webasgi:
    container_name: webasgi
    build:
      context: MFOTS
      dockerfile: .docker/Dockerfile
    command: python -m daphne MFOTS.asgi:application -b 0.0.0.0 -p 9000
    environment:
      - DEBUG=False
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=3803
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    expose:
      - 9000
    networks:
      - ub
    depends_on:
      - db
      - redis
    restart: always

  db:
    image: postgres:16.3
    container_name: db
    restart: always
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 3803
      POSTGRES_INITDB_ARGS: "-A md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ub
    ports:
      - "5432:5432"

  redis:
    image: redis:alpine
    restart: unless-stopped
    privileged: true
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ub

  # frontend:
  #   container_name: frontend
  #   build:
  #     context: ./frontend
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   command: serve -s -l 3000
  #   environment:
  #     - REACT_APP_API_HOST=ubzhd.irgups.ru
  #     - REACT_APP_API_PORT=80
  #     - REACT_APP_API_SECURE=false
  #   depends_on:
  #     - webasgi
  #     - webwsgi
  #   volumes:
  #     - media_volume:/media
  #   networks:
  #     - ub

networks:
  ub:
    driver: bridge

volumes:
  postgres_data:
  media_volume:
  backend_static:
  redis_data:

